
usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000178  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000048  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000070  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001d8  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000112  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000248  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000122  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000010c  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	/* Set frame format: 8 data; 1stop bit */
	UCSR0C = (1<<UCSR0B) | (1<<UCSZ00) | (1<<UCSZ01);

}
void USART_Transmit( unsigned char data )
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8e:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:

#include <util/delay.h>

void USART_Init(unsigned int ubrr){
	/* Set Baud Rate */
	UBRR0H = (unsigned int) (ubrr>>8);
  96:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  9a:	80 93 c4 00 	sts	0x00C4, r24
	/* Activate Transmissor (TX) e Receptor (RX) */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	80 83       	st	Z, r24
	/* Set frame format: 8 data; 1stop bit */
	UCSR0C = (1<<UCSR0B) | (1<<UCSZ00) | (1<<UCSZ01);
  a6:	20 81       	ld	r18, Z
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <USART_Init+0x1c>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	2a 95       	dec	r18
  b4:	e2 f7       	brpl	.-8      	; 0xae <USART_Init+0x18>
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24

}
  bc:	08 95       	ret

000000be <LED_Init>:
	UDR0 = data;
}

void LED_Init(){
	/* Set led OUTPUT */
	DDRD |= (1<<DDD6);
  be:	ea e2       	ldi	r30, 0x2A	; 42
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	/* Turn on LED */
	PORTD |= (1<<PORTD6);
  c8:	eb e2       	ldi	r30, 0x2B	; 43
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
}
  d2:	08 95       	ret

000000d4 <usart_putchar>:

void usart_putchar( unsigned char data )
{
  d4:	98 2f       	mov	r25, r24
	// Do nothing while UDRE0 indicates data still in transit
	while( !(UCSR0A & (1<<UDRE0)) ) {}
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	85 ff       	sbrs	r24, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <usart_putchar+0x6>
	
	// Put data into buffer
	UDR0 = data;
  e0:	90 93 c6 00 	sts	0x00C6, r25
}
  e4:	08 95       	ret

000000e6 <usart_putstring>:


void usart_putstring(char s[])
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	fc 01       	movw	r30, r24
	int i = 0;
	
	while (s[i] != 0x00)
  ec:	80 81       	ld	r24, Z
  ee:	88 23       	and	r24, r24
  f0:	39 f0       	breq	.+14     	; 0x100 <usart_putstring+0x1a>
  f2:	ef 01       	movw	r28, r30
	{
		usart_putchar(s[i]);
  f4:	0e 94 6a 00 	call	0xd4	; 0xd4 <usart_putchar>

void usart_putstring(char s[])
{
	int i = 0;
	
	while (s[i] != 0x00)
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	88 23       	and	r24, r24
  fe:	d1 f7       	brne	.-12     	; 0xf4 <usart_putstring+0xe>
	{
		usart_putchar(s[i]);
		i++;
	}
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <main>:

int main(void)
{
 106:	bf 92       	push	r11
 108:	cf 92       	push	r12
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	/* Turn off interrupt */
	cli();
 118:	f8 94       	cli
	
	/* Init USART */
	USART_Init(MYUBRR);
 11a:	87 e6       	ldi	r24, 0x67	; 103
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>
	
	/* Init LED */
	LED_Init();
 122:	0e 94 5f 00 	call	0xbe	; 0xbe <LED_Init>
		
	/* Turn on interrupt */
	sei();
 126:	78 94       	sei
 128:	28 e9       	ldi	r18, 0x98	; 152
 12a:	3a e3       	ldi	r19, 0x3A	; 58
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12c:	0f 2e       	mov	r0, r31
 12e:	f0 e9       	ldi	r31, 0x90	; 144
 130:	cf 2e       	mov	r12, r31
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	df 2e       	mov	r13, r31
 136:	f0 2d       	mov	r31, r0
	while(1)
	{
		/* Wait 1500ms */
		_delay_ms(1500);
		/* Change led state */
		PORTD ^= (1<<PORTD6);
 138:	cb e2       	ldi	r28, 0x2B	; 43
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	bb 24       	eor	r11, r11
 13e:	68 94       	set
 140:	b6 f8       	bld	r11, 6
		/* Print important string */
		usart_putstring( "Sou foda!\r\n" );
 142:	0f 2e       	mov	r0, r31
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ef 2e       	mov	r14, r31
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	ff 2e       	mov	r15, r31
 14c:	f0 2d       	mov	r31, r0
 14e:	08 e9       	ldi	r16, 0x98	; 152
 150:	1a e3       	ldi	r17, 0x3A	; 58
 152:	05 c0       	rjmp	.+10     	; 0x15e <main+0x58>
 154:	c6 01       	movw	r24, r12
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15e:	21 15       	cp	r18, r1
 160:	31 05       	cpc	r19, r1
 162:	c1 f7       	brne	.-16     	; 0x154 <main+0x4e>
	while(1)
	{
		/* Wait 1500ms */
		_delay_ms(1500);
		/* Change led state */
		PORTD ^= (1<<PORTD6);
 164:	88 81       	ld	r24, Y
 166:	8b 25       	eor	r24, r11
 168:	88 83       	st	Y, r24
		/* Print important string */
		usart_putstring( "Sou foda!\r\n" );
 16a:	c7 01       	movw	r24, r14
 16c:	0e 94 73 00 	call	0xe6	; 0xe6 <usart_putstring>
 170:	98 01       	movw	r18, r16
 172:	f5 cf       	rjmp	.-22     	; 0x15e <main+0x58>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
