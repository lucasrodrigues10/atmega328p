
Sensor + PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000090e  000009a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800116  00800116  000009b8  2**0
                  ALLOC
  3 .debug_aranges 000000a8  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000015b  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004fe  00000000  00000000  00000bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000233  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000620  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000228  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000157  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00001dbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	/* Set frame format: 8 data; 1stop bit */
	UCSR0C = (1<<UCSR0B) | (1<<UCSZ00) | (1<<UCSZ01);

}
void USART_Transmit( unsigned char data )
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  9e:	0c 94 85 04 	jmp	0x90a	; 0x90a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
/* Data */
int dist[MAX_DATA];

void USART_Init(unsigned int ubrr){
	/* Set Baud Rate */
	UBRR0H = (unsigned int) (ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	/* Activate Transmissor (TX) and Receptor (RX) */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	80 83       	st	Z, r24
	/* Set frame format: 8 data; 1stop bit */
	UCSR0C = (1<<UCSR0B) | (1<<UCSZ00) | (1<<UCSZ01);
  b6:	20 81       	ld	r18, Z
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <USART_Init+0x1c>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	2a 95       	dec	r18
  c4:	e2 f7       	brpl	.-8      	; 0xbe <USART_Init+0x18>
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24

}
  cc:	08 95       	ret

000000ce <LED_Init>:
	UDR0 = data;
}

void LED_Init(){
	/* Set led OUTPUT */
	DDRD |= (1<<DDD6);
  ce:	ea e2       	ldi	r30, 0x2A	; 42
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	/* Turn off LED */
	PORTD &= ~(1<<PORTD6);
  d8:	eb e2       	ldi	r30, 0x2B	; 43
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	80 83       	st	Z, r24
}
  e2:	08 95       	ret

000000e4 <Button_Init>:
void Button_Init(){
	DDRC &= ~(1<<DDC5);
  e4:	e7 e2       	ldi	r30, 0x27	; 39
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	80 83       	st	Z, r24
	PORTC |= (1<<PORTC5);
  ee:	e8 e2       	ldi	r30, 0x28	; 40
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	80 83       	st	Z, r24
}
  f8:	08 95       	ret

000000fa <Button_Interrupt_Init>:

void Button_Interrupt_Init(){
	PCICR |= (1<<PCIE1);
  fa:	e8 e6       	ldi	r30, 0x68	; 104
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT13);
 104:	ec e6       	ldi	r30, 0x6C	; 108
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	80 83       	st	Z, r24
}
 10e:	08 95       	ret

00000110 <usart_putchar>:

void usart_putchar( unsigned char data )
{
 110:	98 2f       	mov	r25, r24
	// Do nothing while UDRE0 indicates data still in transit
	while( !(UCSR0A & (1<<UDRE0)) ) {}
 112:	e0 ec       	ldi	r30, 0xC0	; 192
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	85 ff       	sbrs	r24, 5
 11a:	fd cf       	rjmp	.-6      	; 0x116 <usart_putchar+0x6>
	
	// Put data into buffer
	UDR0 = data;
 11c:	90 93 c6 00 	sts	0x00C6, r25
}
 120:	08 95       	ret

00000122 <usart_putstring>:


void usart_putstring(char s[])
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	fc 01       	movw	r30, r24
	int i = 0;
	
	while (s[i] != 0x00)
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	39 f0       	breq	.+14     	; 0x13c <usart_putstring+0x1a>
 12e:	ef 01       	movw	r28, r30
	{
		usart_putchar(s[i]);
 130:	0e 94 88 00 	call	0x110	; 0x110 <usart_putchar>

void usart_putstring(char s[])
{
	int i = 0;
	
	while (s[i] != 0x00)
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	88 23       	and	r24, r24
 13a:	d1 f7       	brne	.-12     	; 0x130 <usart_putstring+0xe>
	{
		usart_putchar(s[i]);
		i++;
	}
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <HBridge_Init>:

void HBridge_Init(){
	DDRB |= (1<<DDB1); //IN1 output
 142:	e4 e2       	ldi	r30, 0x24	; 36
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
	DDRB |= (1<<DDB2); //IN2 output
 14c:	80 81       	ld	r24, Z
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	80 83       	st	Z, r24
	DDRC |= (1<<DDC1); //IN3 output
 152:	e7 e2       	ldi	r30, 0x27	; 39
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
	DDRC |= (1<<DDC0); //IN4 output
 15c:	80 81       	ld	r24, Z
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	80 83       	st	Z, r24
}
 162:	08 95       	ret

00000164 <Timer_Init>:

void Timer_Init(){
	/* Prescaler timer */
	TCCR0A |= ((1<<WGM00)|(1<<COM0A1)|(1<<WGM01));
 164:	e4 e4       	ldi	r30, 0x44	; 68
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	83 68       	ori	r24, 0x83	; 131
 16c:	80 83       	st	Z, r24
	
	/* Enable timer interrupt */
	//TIMSK0 = (1<<TOIE0);
	
	/* Set dutyCycle in PWM */
	OCR0A = (dutyCycle/100)*255;
 16e:	60 91 12 01 	lds	r22, 0x0112
 172:	70 91 13 01 	lds	r23, 0x0113
 176:	80 91 14 01 	lds	r24, 0x0114
 17a:	90 91 15 01 	lds	r25, 0x0115
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	48 ec       	ldi	r20, 0xC8	; 200
 184:	52 e4       	ldi	r21, 0x42	; 66
 186:	0e 94 c6 02 	call	0x58c	; 0x58c <__divsf3>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	4f e7       	ldi	r20, 0x7F	; 127
 190:	53 e4       	ldi	r21, 0x43	; 67
 192:	0e 94 ab 03 	call	0x756	; 0x756 <__mulsf3>
 196:	0e 94 2e 03 	call	0x65c	; 0x65c <__fixunssfsi>
 19a:	67 bd       	out	0x27, r22	; 39
	
	/* Dont remember what is this */
	TCCR0B = (1<<CS00);
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	95 bd       	out	0x25, r25	; 37
	
	TCCR2A = 0;
 1a0:	10 92 b0 00 	sts	0x00B0, r1
	
	/* Initializing timer counter 2 */
	TCCR2B = (1 << CS20)|(1 << CS21)|(1 << CS22);
 1a4:	87 e0       	ldi	r24, 0x07	; 7
 1a6:	80 93 b1 00 	sts	0x00B1, r24
	
	/* Enable Interruption */
	TIMSK2 = (1<<TOIE2);
 1aa:	90 93 70 00 	sts	0x0070, r25
	
	/* Starts clock 2 */
	TCNT2 = 0;
 1ae:	10 92 b2 00 	sts	0x00B2, r1
}
 1b2:	08 95       	ret

000001b4 <Sensor_Init>:

void Sensor_Init(){
	/* Trigger OUTPUT*/
	DDRD |= (1<<DDD7);
 1b4:	ea e2       	ldi	r30, 0x2A	; 42
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	80 83       	st	Z, r24
	/* Echo INPUT */
	DDRD &= ~(1<<DDD2);
 1be:	80 81       	ld	r24, Z
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	80 83       	st	Z, r24
 1c4:	24 ef       	ldi	r18, 0xF4	; 244
 1c6:	31 e0       	ldi	r19, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c8:	40 e9       	ldi	r20, 0x90	; 144
 1ca:	51 e0       	ldi	r21, 0x01	; 1
 1cc:	ca 01       	movw	r24, r20
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <Sensor_Init+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	d1 f7       	brne	.-12     	; 0x1cc <Sensor_Init+0x18>

	_delay_ms(50);

	EIMSK|=(1<<INT0);//enabling interrupt0
 1d8:	ed e3       	ldi	r30, 0x3D	; 61
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24

	EICRA |=(1<<ISC00);//setting interrupt triggering logic change
 1e2:	e9 e6       	ldi	r30, 0x69	; 105
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	80 83       	st	Z, r24
	
}
 1ec:	08 95       	ret

000001ee <Forward_Wheels>:

void Forward_Wheels(){
	PORTC |= (1<<PORTC0);
 1ee:	e8 e2       	ldi	r30, 0x28	; 40
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 83       	st	Z, r24
	PORTC &= ~(1<<PORTC1);
 1f8:	80 81       	ld	r24, Z
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	80 83       	st	Z, r24
	PORTB |= (1<<PORTB1);
 1fe:	e5 e2       	ldi	r30, 0x25	; 37
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	82 60       	ori	r24, 0x02	; 2
 206:	80 83       	st	Z, r24
	PORTB &= ~(1<<PORTB2);
 208:	80 81       	ld	r24, Z
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	80 83       	st	Z, r24
}
 20e:	08 95       	ret

00000210 <Backward_Wheels>:
void Backward_Wheels(){
	PORTC |= (1<<PORTC1);
 210:	e8 e2       	ldi	r30, 0x28	; 40
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	82 60       	ori	r24, 0x02	; 2
 218:	80 83       	st	Z, r24
	PORTC &= ~(1<<PORTC0);
 21a:	80 81       	ld	r24, Z
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	80 83       	st	Z, r24
	PORTB |= (1<<PORTB2);
 220:	e5 e2       	ldi	r30, 0x25	; 37
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	84 60       	ori	r24, 0x04	; 4
 228:	80 83       	st	Z, r24
	PORTB &= ~(1<<PORTB1);
 22a:	80 81       	ld	r24, Z
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	80 83       	st	Z, r24
}
 230:	08 95       	ret

00000232 <Stop_Wheels>:
void Stop_Wheels(){
	OCR0A = 0;
 232:	17 bc       	out	0x27, r1	; 39
}
 234:	08 95       	ret

00000236 <main>:

int j = 0;

int main()
{
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
	/* Disable interrupt */
	cli();
 242:	f8 94       	cli
	
	/* H Bridge Init */
	HBridge_Init();
 244:	0e 94 a1 00 	call	0x142	; 0x142 <HBridge_Init>
	
	/* Initialize Timer PWM Mode */
	Timer_Init();
 248:	0e 94 b2 00 	call	0x164	; 0x164 <Timer_Init>
	
	/* Led Init */
	LED_Init();
 24c:	0e 94 67 00 	call	0xce	; 0xce <LED_Init>
	
	/* Sensor Init */
	Sensor_Init();
 250:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Sensor_Init>
	
	/* Button Init */
	Button_Init();
 254:	0e 94 72 00 	call	0xe4	; 0xe4 <Button_Init>
	Button_Interrupt_Init();
 258:	0e 94 7d 00 	call	0xfa	; 0xfa <Button_Interrupt_Init>
	
	/* USART Init */
	USART_Init(MYUBRR);
 25c:	87 e6       	ldi	r24, 0x67	; 103
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	/* Starts moving forward */
	Forward_Wheels();
 264:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Forward_Wheels>
	
	/* Enable Interrupt */
	sei();
 268:	78 94       	sei
 26a:	80 91 16 01 	lds	r24, 0x0116
 26e:	90 91 17 01 	lds	r25, 0x0117
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	ec 01       	movw	r28, r24
 278:	ce 5d       	subi	r28, 0xDE	; 222
 27a:	de 4f       	sbci	r29, 0xFE	; 254
	/* Super Loop */
	while(1)
	{
		/* Activates sonar */
		/* Trigger Enable */
		PORTD|=(1<<PIND7);
 27c:	0b e2       	ldi	r16, 0x2B	; 43
 27e:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 280:	40 e5       	ldi	r20, 0x50	; 80
		PORTD &=~(1<<PIND7);
		
		/* Calculates distance */
		COUNTA = pulse/(58*2);
		
		dist[j] = COUNTA;
 282:	0f 2e       	mov	r0, r31
 284:	f0 ed       	ldi	r31, 0xD0	; 208
 286:	ef 2e       	mov	r14, r31
 288:	f7 e0       	ldi	r31, 0x07	; 7
 28a:	ff 2e       	mov	r15, r31
 28c:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 28e:	e0 e9       	ldi	r30, 0x90	; 144
 290:	f1 e0       	ldi	r31, 0x01	; 1
	/* Super Loop */
	while(1)
	{
		/* Activates sonar */
		/* Trigger Enable */
		PORTD|=(1<<PIND7);
 292:	d8 01       	movw	r26, r16
 294:	8c 91       	ld	r24, X
 296:	80 68       	ori	r24, 0x80	; 128
 298:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 29a:	84 2f       	mov	r24, r20
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x66>

		_delay_us(15);

		/* Trigger Disable */
		PORTD &=~(1<<PIND7);
 2a0:	8c 91       	ld	r24, X
 2a2:	8f 77       	andi	r24, 0x7F	; 127
 2a4:	8c 93       	st	X, r24
		
		/* Calculates distance */
		COUNTA = pulse/(58*2);
 2a6:	80 91 1c 01 	lds	r24, 0x011C
 2aa:	90 91 1d 01 	lds	r25, 0x011D
		
		dist[j] = COUNTA;
 2ae:	64 e7       	ldi	r22, 0x74	; 116
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	0e 94 2d 04 	call	0x85a	; 0x85a <__divmodhi4>
 2b6:	79 83       	std	Y+1, r23	; 0x01
 2b8:	68 83       	st	Y, r22
 2ba:	97 01       	movw	r18, r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2bc:	cf 01       	movw	r24, r30
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c6:	d1 f7       	brne	.-12     	; 0x2bc <main+0x86>
 2c8:	22 96       	adiw	r28, 0x02	; 2
 2ca:	e3 cf       	rjmp	.-58     	; 0x292 <main+0x5c>

000002cc <__vector_9>:
	}
	
}

/* Motor PWM */
ISR(TIMER2_OVF_vect){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	
	/* Increments interruption counter variable */
	Int_Counter ++;
 2ee:	80 91 1e 01 	lds	r24, 0x011E
 2f2:	90 91 1f 01 	lds	r25, 0x011F
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	90 93 1f 01 	sts	0x011F, r25
 2fc:	80 93 1e 01 	sts	0x011E, r24
	
	/* Adjusts changes to occur every x seconds, in this case : 800 / 61 = 13 seconds */
	if(Int_Counter == 200){
 300:	80 91 1e 01 	lds	r24, 0x011E
 304:	90 91 1f 01 	lds	r25, 0x011F
 308:	88 3c       	cpi	r24, 0xC8	; 200
 30a:	91 05       	cpc	r25, r1
 30c:	01 f5       	brne	.+64     	; 0x34e <__vector_9+0x82>
		if(direction == 1){
 30e:	80 91 20 01 	lds	r24, 0x0120
 312:	90 91 21 01 	lds	r25, 0x0121
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	41 f4       	brne	.+16     	; 0x32a <__vector_9+0x5e>
			Stop_Wheels();
 31a:	0e 94 19 01 	call	0x232	; 0x232 <Stop_Wheels>
			direction = -1;
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	9f ef       	ldi	r25, 0xFF	; 255
 322:	90 93 21 01 	sts	0x0121, r25
 326:	80 93 20 01 	sts	0x0120, r24
		}
		if(direction == 0){
 32a:	80 91 20 01 	lds	r24, 0x0120
 32e:	90 91 21 01 	lds	r25, 0x0121
 332:	89 2b       	or	r24, r25
 334:	41 f4       	brne	.+16     	; 0x346 <__vector_9+0x7a>
			Backward_Wheels();
 336:	0e 94 08 01 	call	0x210	; 0x210 <Backward_Wheels>
			direction = 1;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	90 93 21 01 	sts	0x0121, r25
 342:	80 93 20 01 	sts	0x0120, r24
		}
	Int_Counter = 0;
 346:	10 92 1f 01 	sts	0x011F, r1
 34a:	10 92 1e 01 	sts	0x011E, r1
	}
	//i++;
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_1>:

ISR(INT0_vect)//interrupt service routine when there is a change in logic level

{
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31

	if (i==1)//when logic from HIGH to LOW
 39a:	80 91 18 01 	lds	r24, 0x0118
 39e:	90 91 19 01 	lds	r25, 0x0119
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	49 f5       	brne	.+82     	; 0x3f8 <__vector_1+0x88>

	{

		TCCR1B=0;//disabling counter
 3a6:	10 92 81 00 	sts	0x0081, r1

		pulse=TCNT1 + timer*65535;//count memory is updated to integer
 3aa:	0f 2e       	mov	r0, r31
 3ac:	f4 e8       	ldi	r31, 0x84	; 132
 3ae:	ef 2e       	mov	r14, r31
 3b0:	ff 24       	eor	r15, r15
 3b2:	f0 2d       	mov	r31, r0
 3b4:	f7 01       	movw	r30, r14
 3b6:	00 81       	ld	r16, Z
 3b8:	11 81       	ldd	r17, Z+1	; 0x01
 3ba:	60 91 1a 01 	lds	r22, 0x011A
 3be:	70 91 1b 01 	lds	r23, 0x011B
 3c2:	88 27       	eor	r24, r24
 3c4:	77 fd       	sbrc	r23, 7
 3c6:	80 95       	com	r24
 3c8:	98 2f       	mov	r25, r24
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	3f ef       	ldi	r19, 0xFF	; 255
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsi3>
 3d6:	06 0f       	add	r16, r22
 3d8:	17 1f       	adc	r17, r23
 3da:	10 93 1d 01 	sts	0x011D, r17
 3de:	00 93 1c 01 	sts	0x011C, r16

		TCNT1=0;//resetting the counter memory
 3e2:	f7 01       	movw	r30, r14
 3e4:	11 82       	std	Z+1, r1	; 0x01
 3e6:	10 82       	st	Z, r1

		i=0;
 3e8:	10 92 19 01 	sts	0x0119, r1
 3ec:	10 92 18 01 	sts	0x0118, r1
		
		timer = 0;
 3f0:	10 92 1b 01 	sts	0x011B, r1
 3f4:	10 92 1a 01 	sts	0x011A, r1

	}

	if (i==0)//when logic change from LOW to HIGH
 3f8:	80 91 18 01 	lds	r24, 0x0118
 3fc:	90 91 19 01 	lds	r25, 0x0119
 400:	89 2b       	or	r24, r25
 402:	79 f4       	brne	.+30     	; 0x422 <__vector_1+0xb2>

	{
		timer = 0;
 404:	10 92 1b 01 	sts	0x011B, r1
 408:	10 92 1a 01 	sts	0x011A, r1

		TCCR1B|=(1<<CS11);//enabling counter
 40c:	e1 e8       	ldi	r30, 0x81	; 129
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	82 60       	ori	r24, 0x02	; 2
 414:	80 83       	st	Z, r24

		i=1;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 19 01 	sts	0x0119, r25
 41e:	80 93 18 01 	sts	0x0118, r24

	}

}
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <__vector_13>:
ISR(TIMER1_OVF_vect)
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
	if (i == 1) {
 45e:	80 91 18 01 	lds	r24, 0x0118
 462:	90 91 19 01 	lds	r25, 0x0119
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	99 f4       	brne	.+38     	; 0x490 <__vector_13+0x44>
		TCNT1 = 0;
 46a:	10 92 85 00 	sts	0x0085, r1
 46e:	10 92 84 00 	sts	0x0084, r1
		timer++;
 472:	80 91 1a 01 	lds	r24, 0x011A
 476:	90 91 1b 01 	lds	r25, 0x011B
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	90 93 1b 01 	sts	0x011B, r25
 480:	80 93 1a 01 	sts	0x011A, r24
		PORTD ^= (1<<PORTD6);
 484:	eb e2       	ldi	r30, 0x2B	; 43
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	90 e4       	ldi	r25, 0x40	; 64
 48c:	89 27       	eor	r24, r25
 48e:	80 83       	st	Z, r24
	}
}
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <__vector_4>:
/* Button Interrupt */
ISR(PCINT1_vect){
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
 4d0:	df 93       	push	r29
 4d2:	cf 93       	push	r28
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	2a 97       	sbiw	r28, 0x0a	; 10
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	cd bf       	out	0x3d, r28	; 61
	if( (PINC & (1<<PINC5)) == 0){
 4de:	35 99       	sbic	0x06, 5	; 6
 4e0:	39 c0       	rjmp	.+114    	; 0x554 <__vector_4+0xb2>
 4e2:	24 ef       	ldi	r18, 0xF4	; 244
 4e4:	31 e0       	ldi	r19, 0x01	; 1
 4e6:	40 e9       	ldi	r20, 0x90	; 144
 4e8:	51 e0       	ldi	r21, 0x01	; 1
 4ea:	ca 01       	movw	r24, r20
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <__vector_4+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4f4:	d1 f7       	brne	.-12     	; 0x4ea <__vector_4+0x48>
		/* Debounce */
		_delay_ms(50);
		if( (PINC & (1<<PINC5)) == 0 ){
 4f6:	35 99       	sbic	0x06, 5	; 6
 4f8:	2d c0       	rjmp	.+90     	; 0x554 <__vector_4+0xb2>
			/* Disable Motor Interrupt and Stop */
			Stop_Wheels();
 4fa:	0e 94 19 01 	call	0x232	; 0x232 <Stop_Wheels>
			TIMSK0 &= ~(1<<TOIE0);
 4fe:	ee e6       	ldi	r30, 0x6E	; 110
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	8e 7f       	andi	r24, 0xFE	; 254
 506:	80 83       	st	Z, r24
			/* Print Data */
			usart_putstring("Stop\n\r");
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 91 00 	call	0x122	; 0x122 <usart_putstring>
 510:	02 e2       	ldi	r16, 0x22	; 34
 512:	11 e0       	ldi	r17, 0x01	; 1
			char str[10];
			int k;
			for(k=0;k<MAX_DATA;k++){
				itoa(dist[k],str,10);
 514:	7e 01       	movw	r14, r28
 516:	08 94       	sec
 518:	e1 1c       	adc	r14, r1
 51a:	f1 1c       	adc	r15, r1
			TIMSK0 &= ~(1<<TOIE0);
			/* Print Data */
			usart_putstring("Stop\n\r");
			char str[10];
			int k;
			for(k=0;k<MAX_DATA;k++){
 51c:	0f 2e       	mov	r0, r31
 51e:	fe e5       	ldi	r31, 0x5E	; 94
 520:	cf 2e       	mov	r12, r31
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	df 2e       	mov	r13, r31
 526:	f0 2d       	mov	r31, r0
				itoa(dist[k],str,10);
 528:	f8 01       	movw	r30, r16
 52a:	81 91       	ld	r24, Z+
 52c:	91 91       	ld	r25, Z+
 52e:	8f 01       	movw	r16, r30
 530:	b7 01       	movw	r22, r14
 532:	4a e0       	ldi	r20, 0x0A	; 10
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	0e 94 54 04 	call	0x8a8	; 0x8a8 <itoa>
				usart_putstring(str);
 53a:	c7 01       	movw	r24, r14
 53c:	0e 94 91 00 	call	0x122	; 0x122 <usart_putstring>
				usart_putchar(';');
 540:	8b e3       	ldi	r24, 0x3B	; 59
 542:	0e 94 88 00 	call	0x110	; 0x110 <usart_putchar>
			TIMSK0 &= ~(1<<TOIE0);
			/* Print Data */
			usart_putstring("Stop\n\r");
			char str[10];
			int k;
			for(k=0;k<MAX_DATA;k++){
 546:	0c 15       	cp	r16, r12
 548:	1d 05       	cpc	r17, r13
 54a:	71 f7       	brne	.-36     	; 0x528 <__vector_4+0x86>
				itoa(dist[k],str,10);
				usart_putstring(str);
				usart_putchar(';');
			}
			usart_putstring("\n\rFinish\n\r");
 54c:	87 e0       	ldi	r24, 0x07	; 7
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 91 00 	call	0x122	; 0x122 <usart_putstring>
		}
	}
}
 554:	2a 96       	adiw	r28, 0x0a	; 10
 556:	de bf       	out	0x3e, r29	; 62
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	bf 91       	pop	r27
 564:	af 91       	pop	r26
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	7f 91       	pop	r23
 56c:	6f 91       	pop	r22
 56e:	5f 91       	pop	r21
 570:	4f 91       	pop	r20
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	ff 90       	pop	r15
 57c:	ef 90       	pop	r14
 57e:	df 90       	pop	r13
 580:	cf 90       	pop	r12
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <__divsf3>:
 58c:	0c d0       	rcall	.+24     	; 0x5a6 <__divsf3x>
 58e:	a9 c0       	rjmp	.+338    	; 0x6e2 <__fp_round>
 590:	a1 d0       	rcall	.+322    	; 0x6d4 <__fp_pscB>
 592:	40 f0       	brcs	.+16     	; 0x5a4 <__divsf3+0x18>
 594:	98 d0       	rcall	.+304    	; 0x6c6 <__fp_pscA>
 596:	30 f0       	brcs	.+12     	; 0x5a4 <__divsf3+0x18>
 598:	21 f4       	brne	.+8      	; 0x5a2 <__divsf3+0x16>
 59a:	5f 3f       	cpi	r21, 0xFF	; 255
 59c:	19 f0       	breq	.+6      	; 0x5a4 <__divsf3+0x18>
 59e:	8a c0       	rjmp	.+276    	; 0x6b4 <__fp_inf>
 5a0:	51 11       	cpse	r21, r1
 5a2:	d3 c0       	rjmp	.+422    	; 0x74a <__fp_szero>
 5a4:	8d c0       	rjmp	.+282    	; 0x6c0 <__fp_nan>

000005a6 <__divsf3x>:
 5a6:	ae d0       	rcall	.+348    	; 0x704 <__fp_split3>
 5a8:	98 f3       	brcs	.-26     	; 0x590 <__divsf3+0x4>

000005aa <__divsf3_pse>:
 5aa:	99 23       	and	r25, r25
 5ac:	c9 f3       	breq	.-14     	; 0x5a0 <__divsf3+0x14>
 5ae:	55 23       	and	r21, r21
 5b0:	b1 f3       	breq	.-20     	; 0x59e <__divsf3+0x12>
 5b2:	95 1b       	sub	r25, r21
 5b4:	55 0b       	sbc	r21, r21
 5b6:	bb 27       	eor	r27, r27
 5b8:	aa 27       	eor	r26, r26
 5ba:	62 17       	cp	r22, r18
 5bc:	73 07       	cpc	r23, r19
 5be:	84 07       	cpc	r24, r20
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__divsf3_pse+0x26>
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	44 1f       	adc	r20, r20
 5cc:	aa 1f       	adc	r26, r26
 5ce:	a9 f3       	breq	.-22     	; 0x5ba <__divsf3_pse+0x10>
 5d0:	33 d0       	rcall	.+102    	; 0x638 <__divsf3_pse+0x8e>
 5d2:	0e 2e       	mov	r0, r30
 5d4:	3a f0       	brmi	.+14     	; 0x5e4 <__divsf3_pse+0x3a>
 5d6:	e0 e8       	ldi	r30, 0x80	; 128
 5d8:	30 d0       	rcall	.+96     	; 0x63a <__divsf3_pse+0x90>
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	e6 95       	lsr	r30
 5e0:	00 1c       	adc	r0, r0
 5e2:	ca f7       	brpl	.-14     	; 0x5d6 <__divsf3_pse+0x2c>
 5e4:	29 d0       	rcall	.+82     	; 0x638 <__divsf3_pse+0x8e>
 5e6:	fe 2f       	mov	r31, r30
 5e8:	27 d0       	rcall	.+78     	; 0x638 <__divsf3_pse+0x8e>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	bb 1f       	adc	r27, r27
 5f2:	26 17       	cp	r18, r22
 5f4:	37 07       	cpc	r19, r23
 5f6:	48 07       	cpc	r20, r24
 5f8:	ab 07       	cpc	r26, r27
 5fa:	b0 e8       	ldi	r27, 0x80	; 128
 5fc:	09 f0       	breq	.+2      	; 0x600 <__divsf3_pse+0x56>
 5fe:	bb 0b       	sbc	r27, r27
 600:	80 2d       	mov	r24, r0
 602:	bf 01       	movw	r22, r30
 604:	ff 27       	eor	r31, r31
 606:	93 58       	subi	r25, 0x83	; 131
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	2a f0       	brmi	.+10     	; 0x616 <__divsf3_pse+0x6c>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	68 f0       	brcs	.+26     	; 0x62c <__divsf3_pse+0x82>
 612:	50 c0       	rjmp	.+160    	; 0x6b4 <__fp_inf>
 614:	9a c0       	rjmp	.+308    	; 0x74a <__fp_szero>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	ec f3       	brlt	.-6      	; 0x614 <__divsf3_pse+0x6a>
 61a:	98 3e       	cpi	r25, 0xE8	; 232
 61c:	dc f3       	brlt	.-10     	; 0x614 <__divsf3_pse+0x6a>
 61e:	86 95       	lsr	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f7 95       	ror	r31
 628:	9f 5f       	subi	r25, 0xFF	; 255
 62a:	c9 f7       	brne	.-14     	; 0x61e <__divsf3_pse+0x74>
 62c:	88 0f       	add	r24, r24
 62e:	91 1d       	adc	r25, r1
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	97 f9       	bld	r25, 7
 636:	08 95       	ret
 638:	e1 e0       	ldi	r30, 0x01	; 1
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	bb 1f       	adc	r27, r27
 642:	62 17       	cp	r22, r18
 644:	73 07       	cpc	r23, r19
 646:	84 07       	cpc	r24, r20
 648:	ba 07       	cpc	r27, r26
 64a:	20 f0       	brcs	.+8      	; 0x654 <__divsf3_pse+0xaa>
 64c:	62 1b       	sub	r22, r18
 64e:	73 0b       	sbc	r23, r19
 650:	84 0b       	sbc	r24, r20
 652:	ba 0b       	sbc	r27, r26
 654:	ee 1f       	adc	r30, r30
 656:	88 f7       	brcc	.-30     	; 0x63a <__divsf3_pse+0x90>
 658:	e0 95       	com	r30
 65a:	08 95       	ret

0000065c <__fixunssfsi>:
 65c:	5b d0       	rcall	.+182    	; 0x714 <__fp_splitA>
 65e:	88 f0       	brcs	.+34     	; 0x682 <__fixunssfsi+0x26>
 660:	9f 57       	subi	r25, 0x7F	; 127
 662:	90 f0       	brcs	.+36     	; 0x688 <__fixunssfsi+0x2c>
 664:	b9 2f       	mov	r27, r25
 666:	99 27       	eor	r25, r25
 668:	b7 51       	subi	r27, 0x17	; 23
 66a:	a0 f0       	brcs	.+40     	; 0x694 <__fixunssfsi+0x38>
 66c:	d1 f0       	breq	.+52     	; 0x6a2 <__fixunssfsi+0x46>
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	1a f0       	brmi	.+6      	; 0x67e <__fixunssfsi+0x22>
 678:	ba 95       	dec	r27
 67a:	c9 f7       	brne	.-14     	; 0x66e <__fixunssfsi+0x12>
 67c:	12 c0       	rjmp	.+36     	; 0x6a2 <__fixunssfsi+0x46>
 67e:	b1 30       	cpi	r27, 0x01	; 1
 680:	81 f0       	breq	.+32     	; 0x6a2 <__fixunssfsi+0x46>
 682:	62 d0       	rcall	.+196    	; 0x748 <__fp_zero>
 684:	b1 e0       	ldi	r27, 0x01	; 1
 686:	08 95       	ret
 688:	5f c0       	rjmp	.+190    	; 0x748 <__fp_zero>
 68a:	67 2f       	mov	r22, r23
 68c:	78 2f       	mov	r23, r24
 68e:	88 27       	eor	r24, r24
 690:	b8 5f       	subi	r27, 0xF8	; 248
 692:	39 f0       	breq	.+14     	; 0x6a2 <__fixunssfsi+0x46>
 694:	b9 3f       	cpi	r27, 0xF9	; 249
 696:	cc f3       	brlt	.-14     	; 0x68a <__fixunssfsi+0x2e>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b3 95       	inc	r27
 6a0:	d9 f7       	brne	.-10     	; 0x698 <__fixunssfsi+0x3c>
 6a2:	3e f4       	brtc	.+14     	; 0x6b2 <__fixunssfsi+0x56>
 6a4:	90 95       	com	r25
 6a6:	80 95       	com	r24
 6a8:	70 95       	com	r23
 6aa:	61 95       	neg	r22
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	08 95       	ret

000006b4 <__fp_inf>:
 6b4:	97 f9       	bld	r25, 7
 6b6:	9f 67       	ori	r25, 0x7F	; 127
 6b8:	80 e8       	ldi	r24, 0x80	; 128
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	08 95       	ret

000006c0 <__fp_nan>:
 6c0:	9f ef       	ldi	r25, 0xFF	; 255
 6c2:	80 ec       	ldi	r24, 0xC0	; 192
 6c4:	08 95       	ret

000006c6 <__fp_pscA>:
 6c6:	00 24       	eor	r0, r0
 6c8:	0a 94       	dec	r0
 6ca:	16 16       	cp	r1, r22
 6cc:	17 06       	cpc	r1, r23
 6ce:	18 06       	cpc	r1, r24
 6d0:	09 06       	cpc	r0, r25
 6d2:	08 95       	ret

000006d4 <__fp_pscB>:
 6d4:	00 24       	eor	r0, r0
 6d6:	0a 94       	dec	r0
 6d8:	12 16       	cp	r1, r18
 6da:	13 06       	cpc	r1, r19
 6dc:	14 06       	cpc	r1, r20
 6de:	05 06       	cpc	r0, r21
 6e0:	08 95       	ret

000006e2 <__fp_round>:
 6e2:	09 2e       	mov	r0, r25
 6e4:	03 94       	inc	r0
 6e6:	00 0c       	add	r0, r0
 6e8:	11 f4       	brne	.+4      	; 0x6ee <__fp_round+0xc>
 6ea:	88 23       	and	r24, r24
 6ec:	52 f0       	brmi	.+20     	; 0x702 <__fp_round+0x20>
 6ee:	bb 0f       	add	r27, r27
 6f0:	40 f4       	brcc	.+16     	; 0x702 <__fp_round+0x20>
 6f2:	bf 2b       	or	r27, r31
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__fp_round+0x18>
 6f6:	60 ff       	sbrs	r22, 0
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <__fp_round+0x20>
 6fa:	6f 5f       	subi	r22, 0xFF	; 255
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__fp_split3>:
 704:	57 fd       	sbrc	r21, 7
 706:	90 58       	subi	r25, 0x80	; 128
 708:	44 0f       	add	r20, r20
 70a:	55 1f       	adc	r21, r21
 70c:	59 f0       	breq	.+22     	; 0x724 <__fp_splitA+0x10>
 70e:	5f 3f       	cpi	r21, 0xFF	; 255
 710:	71 f0       	breq	.+28     	; 0x72e <__fp_splitA+0x1a>
 712:	47 95       	ror	r20

00000714 <__fp_splitA>:
 714:	88 0f       	add	r24, r24
 716:	97 fb       	bst	r25, 7
 718:	99 1f       	adc	r25, r25
 71a:	61 f0       	breq	.+24     	; 0x734 <__fp_splitA+0x20>
 71c:	9f 3f       	cpi	r25, 0xFF	; 255
 71e:	79 f0       	breq	.+30     	; 0x73e <__fp_splitA+0x2a>
 720:	87 95       	ror	r24
 722:	08 95       	ret
 724:	12 16       	cp	r1, r18
 726:	13 06       	cpc	r1, r19
 728:	14 06       	cpc	r1, r20
 72a:	55 1f       	adc	r21, r21
 72c:	f2 cf       	rjmp	.-28     	; 0x712 <__fp_split3+0xe>
 72e:	46 95       	lsr	r20
 730:	f1 df       	rcall	.-30     	; 0x714 <__fp_splitA>
 732:	08 c0       	rjmp	.+16     	; 0x744 <__fp_splitA+0x30>
 734:	16 16       	cp	r1, r22
 736:	17 06       	cpc	r1, r23
 738:	18 06       	cpc	r1, r24
 73a:	99 1f       	adc	r25, r25
 73c:	f1 cf       	rjmp	.-30     	; 0x720 <__fp_splitA+0xc>
 73e:	86 95       	lsr	r24
 740:	71 05       	cpc	r23, r1
 742:	61 05       	cpc	r22, r1
 744:	08 94       	sec
 746:	08 95       	ret

00000748 <__fp_zero>:
 748:	e8 94       	clt

0000074a <__fp_szero>:
 74a:	bb 27       	eor	r27, r27
 74c:	66 27       	eor	r22, r22
 74e:	77 27       	eor	r23, r23
 750:	cb 01       	movw	r24, r22
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret

00000756 <__mulsf3>:
 756:	0b d0       	rcall	.+22     	; 0x76e <__mulsf3x>
 758:	c4 cf       	rjmp	.-120    	; 0x6e2 <__fp_round>
 75a:	b5 df       	rcall	.-150    	; 0x6c6 <__fp_pscA>
 75c:	28 f0       	brcs	.+10     	; 0x768 <__mulsf3+0x12>
 75e:	ba df       	rcall	.-140    	; 0x6d4 <__fp_pscB>
 760:	18 f0       	brcs	.+6      	; 0x768 <__mulsf3+0x12>
 762:	95 23       	and	r25, r21
 764:	09 f0       	breq	.+2      	; 0x768 <__mulsf3+0x12>
 766:	a6 cf       	rjmp	.-180    	; 0x6b4 <__fp_inf>
 768:	ab cf       	rjmp	.-170    	; 0x6c0 <__fp_nan>
 76a:	11 24       	eor	r1, r1
 76c:	ee cf       	rjmp	.-36     	; 0x74a <__fp_szero>

0000076e <__mulsf3x>:
 76e:	ca df       	rcall	.-108    	; 0x704 <__fp_split3>
 770:	a0 f3       	brcs	.-24     	; 0x75a <__mulsf3+0x4>

00000772 <__mulsf3_pse>:
 772:	95 9f       	mul	r25, r21
 774:	d1 f3       	breq	.-12     	; 0x76a <__mulsf3+0x14>
 776:	95 0f       	add	r25, r21
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	55 1f       	adc	r21, r21
 77c:	62 9f       	mul	r22, r18
 77e:	f0 01       	movw	r30, r0
 780:	72 9f       	mul	r23, r18
 782:	bb 27       	eor	r27, r27
 784:	f0 0d       	add	r31, r0
 786:	b1 1d       	adc	r27, r1
 788:	63 9f       	mul	r22, r19
 78a:	aa 27       	eor	r26, r26
 78c:	f0 0d       	add	r31, r0
 78e:	b1 1d       	adc	r27, r1
 790:	aa 1f       	adc	r26, r26
 792:	64 9f       	mul	r22, r20
 794:	66 27       	eor	r22, r22
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	66 1f       	adc	r22, r22
 79c:	82 9f       	mul	r24, r18
 79e:	22 27       	eor	r18, r18
 7a0:	b0 0d       	add	r27, r0
 7a2:	a1 1d       	adc	r26, r1
 7a4:	62 1f       	adc	r22, r18
 7a6:	73 9f       	mul	r23, r19
 7a8:	b0 0d       	add	r27, r0
 7aa:	a1 1d       	adc	r26, r1
 7ac:	62 1f       	adc	r22, r18
 7ae:	83 9f       	mul	r24, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	22 1f       	adc	r18, r18
 7b6:	74 9f       	mul	r23, r20
 7b8:	33 27       	eor	r19, r19
 7ba:	a0 0d       	add	r26, r0
 7bc:	61 1d       	adc	r22, r1
 7be:	23 1f       	adc	r18, r19
 7c0:	84 9f       	mul	r24, r20
 7c2:	60 0d       	add	r22, r0
 7c4:	21 1d       	adc	r18, r1
 7c6:	82 2f       	mov	r24, r18
 7c8:	76 2f       	mov	r23, r22
 7ca:	6a 2f       	mov	r22, r26
 7cc:	11 24       	eor	r1, r1
 7ce:	9f 57       	subi	r25, 0x7F	; 127
 7d0:	50 40       	sbci	r21, 0x00	; 0
 7d2:	8a f0       	brmi	.+34     	; 0x7f6 <__mulsf3_pse+0x84>
 7d4:	e1 f0       	breq	.+56     	; 0x80e <__mulsf3_pse+0x9c>
 7d6:	88 23       	and	r24, r24
 7d8:	4a f0       	brmi	.+18     	; 0x7ec <__mulsf3_pse+0x7a>
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	bb 1f       	adc	r27, r27
 7e0:	66 1f       	adc	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	88 1f       	adc	r24, r24
 7e6:	91 50       	subi	r25, 0x01	; 1
 7e8:	50 40       	sbci	r21, 0x00	; 0
 7ea:	a9 f7       	brne	.-22     	; 0x7d6 <__mulsf3_pse+0x64>
 7ec:	9e 3f       	cpi	r25, 0xFE	; 254
 7ee:	51 05       	cpc	r21, r1
 7f0:	70 f0       	brcs	.+28     	; 0x80e <__mulsf3_pse+0x9c>
 7f2:	60 cf       	rjmp	.-320    	; 0x6b4 <__fp_inf>
 7f4:	aa cf       	rjmp	.-172    	; 0x74a <__fp_szero>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	ec f3       	brlt	.-6      	; 0x7f4 <__mulsf3_pse+0x82>
 7fa:	98 3e       	cpi	r25, 0xE8	; 232
 7fc:	dc f3       	brlt	.-10     	; 0x7f4 <__mulsf3_pse+0x82>
 7fe:	86 95       	lsr	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	b7 95       	ror	r27
 806:	f7 95       	ror	r31
 808:	e7 95       	ror	r30
 80a:	9f 5f       	subi	r25, 0xFF	; 255
 80c:	c1 f7       	brne	.-16     	; 0x7fe <__mulsf3_pse+0x8c>
 80e:	fe 2b       	or	r31, r30
 810:	88 0f       	add	r24, r24
 812:	91 1d       	adc	r25, r1
 814:	96 95       	lsr	r25
 816:	87 95       	ror	r24
 818:	97 f9       	bld	r25, 7
 81a:	08 95       	ret

0000081c <__mulsi3>:
 81c:	62 9f       	mul	r22, r18
 81e:	d0 01       	movw	r26, r0
 820:	73 9f       	mul	r23, r19
 822:	f0 01       	movw	r30, r0
 824:	82 9f       	mul	r24, r18
 826:	e0 0d       	add	r30, r0
 828:	f1 1d       	adc	r31, r1
 82a:	64 9f       	mul	r22, r20
 82c:	e0 0d       	add	r30, r0
 82e:	f1 1d       	adc	r31, r1
 830:	92 9f       	mul	r25, r18
 832:	f0 0d       	add	r31, r0
 834:	83 9f       	mul	r24, r19
 836:	f0 0d       	add	r31, r0
 838:	74 9f       	mul	r23, r20
 83a:	f0 0d       	add	r31, r0
 83c:	65 9f       	mul	r22, r21
 83e:	f0 0d       	add	r31, r0
 840:	99 27       	eor	r25, r25
 842:	72 9f       	mul	r23, r18
 844:	b0 0d       	add	r27, r0
 846:	e1 1d       	adc	r30, r1
 848:	f9 1f       	adc	r31, r25
 84a:	63 9f       	mul	r22, r19
 84c:	b0 0d       	add	r27, r0
 84e:	e1 1d       	adc	r30, r1
 850:	f9 1f       	adc	r31, r25
 852:	bd 01       	movw	r22, r26
 854:	cf 01       	movw	r24, r30
 856:	11 24       	eor	r1, r1
 858:	08 95       	ret

0000085a <__divmodhi4>:
 85a:	97 fb       	bst	r25, 7
 85c:	09 2e       	mov	r0, r25
 85e:	07 26       	eor	r0, r23
 860:	0a d0       	rcall	.+20     	; 0x876 <__divmodhi4_neg1>
 862:	77 fd       	sbrc	r23, 7
 864:	04 d0       	rcall	.+8      	; 0x86e <__divmodhi4_neg2>
 866:	0c d0       	rcall	.+24     	; 0x880 <__udivmodhi4>
 868:	06 d0       	rcall	.+12     	; 0x876 <__divmodhi4_neg1>
 86a:	00 20       	and	r0, r0
 86c:	1a f4       	brpl	.+6      	; 0x874 <__divmodhi4_exit>

0000086e <__divmodhi4_neg2>:
 86e:	70 95       	com	r23
 870:	61 95       	neg	r22
 872:	7f 4f       	sbci	r23, 0xFF	; 255

00000874 <__divmodhi4_exit>:
 874:	08 95       	ret

00000876 <__divmodhi4_neg1>:
 876:	f6 f7       	brtc	.-4      	; 0x874 <__divmodhi4_exit>
 878:	90 95       	com	r25
 87a:	81 95       	neg	r24
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	08 95       	ret

00000880 <__udivmodhi4>:
 880:	aa 1b       	sub	r26, r26
 882:	bb 1b       	sub	r27, r27
 884:	51 e1       	ldi	r21, 0x11	; 17
 886:	07 c0       	rjmp	.+14     	; 0x896 <__udivmodhi4_ep>

00000888 <__udivmodhi4_loop>:
 888:	aa 1f       	adc	r26, r26
 88a:	bb 1f       	adc	r27, r27
 88c:	a6 17       	cp	r26, r22
 88e:	b7 07       	cpc	r27, r23
 890:	10 f0       	brcs	.+4      	; 0x896 <__udivmodhi4_ep>
 892:	a6 1b       	sub	r26, r22
 894:	b7 0b       	sbc	r27, r23

00000896 <__udivmodhi4_ep>:
 896:	88 1f       	adc	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	5a 95       	dec	r21
 89c:	a9 f7       	brne	.-22     	; 0x888 <__udivmodhi4_loop>
 89e:	80 95       	com	r24
 8a0:	90 95       	com	r25
 8a2:	bc 01       	movw	r22, r24
 8a4:	cd 01       	movw	r24, r26
 8a6:	08 95       	ret

000008a8 <itoa>:
 8a8:	fb 01       	movw	r30, r22
 8aa:	9f 01       	movw	r18, r30
 8ac:	e8 94       	clt
 8ae:	42 30       	cpi	r20, 0x02	; 2
 8b0:	c4 f0       	brlt	.+48     	; 0x8e2 <itoa+0x3a>
 8b2:	45 32       	cpi	r20, 0x25	; 37
 8b4:	b4 f4       	brge	.+44     	; 0x8e2 <itoa+0x3a>
 8b6:	4a 30       	cpi	r20, 0x0A	; 10
 8b8:	29 f4       	brne	.+10     	; 0x8c4 <itoa+0x1c>
 8ba:	97 fb       	bst	r25, 7
 8bc:	1e f4       	brtc	.+6      	; 0x8c4 <itoa+0x1c>
 8be:	90 95       	com	r25
 8c0:	81 95       	neg	r24
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	64 2f       	mov	r22, r20
 8c6:	77 27       	eor	r23, r23
 8c8:	0e 94 40 04 	call	0x880	; 0x880 <__udivmodhi4>
 8cc:	80 5d       	subi	r24, 0xD0	; 208
 8ce:	8a 33       	cpi	r24, 0x3A	; 58
 8d0:	0c f0       	brlt	.+2      	; 0x8d4 <itoa+0x2c>
 8d2:	89 5d       	subi	r24, 0xD9	; 217
 8d4:	81 93       	st	Z+, r24
 8d6:	cb 01       	movw	r24, r22
 8d8:	00 97       	sbiw	r24, 0x00	; 0
 8da:	a1 f7       	brne	.-24     	; 0x8c4 <itoa+0x1c>
 8dc:	16 f4       	brtc	.+4      	; 0x8e2 <itoa+0x3a>
 8de:	5d e2       	ldi	r21, 0x2D	; 45
 8e0:	51 93       	st	Z+, r21
 8e2:	10 82       	st	Z, r1
 8e4:	c9 01       	movw	r24, r18
 8e6:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <strrev>

000008ea <strrev>:
 8ea:	dc 01       	movw	r26, r24
 8ec:	fc 01       	movw	r30, r24
 8ee:	67 2f       	mov	r22, r23
 8f0:	71 91       	ld	r23, Z+
 8f2:	77 23       	and	r23, r23
 8f4:	e1 f7       	brne	.-8      	; 0x8ee <strrev+0x4>
 8f6:	32 97       	sbiw	r30, 0x02	; 2
 8f8:	04 c0       	rjmp	.+8      	; 0x902 <__stack+0x3>
 8fa:	7c 91       	ld	r23, X
 8fc:	6d 93       	st	X+, r22
 8fe:	70 83       	st	Z, r23
 900:	62 91       	ld	r22, -Z
 902:	ae 17       	cp	r26, r30
 904:	bf 07       	cpc	r27, r31
 906:	c8 f3       	brcs	.-14     	; 0x8fa <strrev+0x10>
 908:	08 95       	ret

0000090a <_exit>:
 90a:	f8 94       	cli

0000090c <__stop_program>:
 90c:	ff cf       	rjmp	.-2      	; 0x90c <__stop_program>
