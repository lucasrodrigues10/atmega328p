
interrupcao_led_botao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
portal.vidadesilicio.com.br/wp-content/uploads/2017/05/PCINTESQUEMA.png
*/

int main(void)
{
	cli();// desabilita interrupcao para configurar as bagaca
  80:	f8 94       	cli

	DDRB |= (1<<DDB0); // DEFINE LED COMO OUTPUTI
  82:	20 9a       	sbi	0x04, 0	; 4
	
	DDRD &= ~(1<<DDD0); // DEFINE BOTAO COMO SAIR DO ARMARIO
  84:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1<<PORTD0); // PULL UP LIGADO PARA BOTAO
  86:	58 9a       	sbi	0x0b, 0	; 11
	
	PCICR |= (1<<PCIE2); // HABILITA INTERRUPCAO DA PORT D
  88:	e8 e6       	ldi	r30, 0x68	; 104
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT0); // HABILITA INTERRUPCAO DA PORT D PINO 0
  92:	ed e6       	ldi	r30, 0x6D	; 109
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	
	sei(); //habilita interrupcao da porra toda
  9c:	78 94       	sei
	
	//SUPER LUPI
	while(1){
		//Brilha brilha estrelinha a cada 1S
		PORTB |= (1<<PORTB0);
  9e:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
		_delay_ms(1000);
		PORTB &= ~(1<<PORTB0);
  b2:	28 98       	cbi	0x05, 0	; 5
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	83 ed       	ldi	r24, 0xD3	; 211
  b8:	90 e3       	ldi	r25, 0x30	; 48
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
  c6:	eb cf       	rjmp	.-42     	; 0x9e <main+0x1e>

000000c8 <__vector_5>:
		_delay_ms(1000);		
	}
	
}
ISR(PCINT2_vect){ //ISR (Interrupt Service Routine) - Funcao da interrupcao
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	if( (PIND & (1<<PIND0)) == 0){
  d8:	48 99       	sbic	0x09, 0	; 9
  da:	10 c0       	rjmp	.+32     	; 0xfc <__vector_5+0x34>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	81 ee       	ldi	r24, 0xE1	; 225
  e0:	94 e0       	ldi	r25, 0x04	; 4
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <__vector_5+0x1a>
  ea:	00 c0       	rjmp	.+0      	; 0xec <__vector_5+0x24>
  ec:	00 00       	nop
		_delay_ms(100);
		while( (PIND & (1<<PIND0)) == 0 ){
  ee:	48 99       	sbic	0x09, 0	; 9
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <__vector_5+0x30>
			PORTB |= (1<<PORTB0); //FASSASSE A LUIZ
  f2:	28 9a       	sbi	0x05, 0	; 5
	
}
ISR(PCINT2_vect){ //ISR (Interrupt Service Routine) - Funcao da interrupcao
	if( (PIND & (1<<PIND0)) == 0){
		_delay_ms(100);
		while( (PIND & (1<<PIND0)) == 0 ){
  f4:	48 9b       	sbis	0x09, 0	; 9
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <__vector_5+0x2a>
			PORTB |= (1<<PORTB0); //FASSASSE A LUIZ
		}
		if( (PIND & (1<<PIND0)) != 0 ){
  f8:	48 99       	sbic	0x09, 0	; 9
			PORTB &= ~(1<<PORTB0); //AI QUE ESCURIDAUM
  fa:	28 98       	cbi	0x05, 0	; 5
		}
	}
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
