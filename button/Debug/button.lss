
button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ba  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f2  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020e  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e3  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e0  00000000  00000000  000007e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000068  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_4>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
portal.vidadesilicio.com.br/wp-content/uploads/2017/05/PCINTESQUEMA.png
*/

int main(void)
{
	cli();// desabilita interrupcao para configurar as bagaca
  80:	f8 94       	cli

	DDRD |= (1<<DDB6); // DEFINE LED COMO OUTPUTI
  82:	ea e2       	ldi	r30, 0x2A	; 42
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<DDC5); // DEFINE BOTAO COMO SAIR DO ARMARIO
  8c:	e7 e2       	ldi	r30, 0x27	; 39
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8f 7d       	andi	r24, 0xDF	; 223
  94:	80 83       	st	Z, r24
	PORTC |= (1<<PORTC5); // PULL UP LIGADO PARA BOTAO
  96:	e8 e2       	ldi	r30, 0x28	; 40
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE1); // HABILITA INTERRUPCAO DA PORT D
  a0:	e8 e6       	ldi	r30, 0x68	; 104
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT13); // HABILITA INTERRUPCAO DA PORT D PINO 0
  aa:	ec e6       	ldi	r30, 0x6C	; 108
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 83       	st	Z, r24
	
	sei(); //habilita interrupcao da porra toda
  b4:	78 94       	sei
	
	//SUPER LUPI
	while(1){
		//Brilha brilha estrelinha a cada 1S
		PORTD |= (1<<PORTD6);
  b6:	eb e2       	ldi	r30, 0x2B	; 43
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	a0 e2       	ldi	r26, 0x20	; 32
  bc:	be e4       	ldi	r27, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	40 e9       	ldi	r20, 0x90	; 144
  c0:	51 e0       	ldi	r21, 0x01	; 1
		_delay_ms(2000);
		PORTD &= ~(1<<PORTD6);
  c2:	60 e1       	ldi	r22, 0x10	; 16
  c4:	77 e2       	ldi	r23, 0x27	; 39
	sei(); //habilita interrupcao da porra toda
	
	//SUPER LUPI
	while(1){
		//Brilha brilha estrelinha a cada 1S
		PORTD |= (1<<PORTD6);
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
  cc:	9d 01       	movw	r18, r26
  ce:	ca 01       	movw	r24, r20
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d1 f7       	brne	.-12     	; 0xce <main+0x4e>
		_delay_ms(2000);
		PORTD &= ~(1<<PORTD6);
  da:	80 81       	ld	r24, Z
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	80 83       	st	Z, r24
  e0:	9b 01       	movw	r18, r22
  e2:	ca 01       	movw	r24, r20
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d1 f7       	brne	.-12     	; 0xe2 <main+0x62>
  ee:	eb cf       	rjmp	.-42     	; 0xc6 <main+0x46>

000000f0 <__vector_4>:
		_delay_ms(1000);
	}
	
}
ISR(PCINT1_vect){ //ISR (Interrupt Service Routine) - Funcao da interrupcao
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	if( (PINC & (1<<PINC5)) == 0){
 10e:	35 99       	sbic	0x06, 5	; 6
 110:	1d c0       	rjmp	.+58     	; 0x14c <__vector_4+0x5c>
 112:	28 ee       	ldi	r18, 0xE8	; 232
 114:	33 e0       	ldi	r19, 0x03	; 3
 116:	40 e9       	ldi	r20, 0x90	; 144
 118:	51 e0       	ldi	r21, 0x01	; 1
 11a:	ca 01       	movw	r24, r20
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <__vector_4+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 120:	21 50       	subi	r18, 0x01	; 1
 122:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 124:	d1 f7       	brne	.-12     	; 0x11a <__vector_4+0x2a>
		_delay_ms(100);
		while( (PINC & (1<<PINC5)) == 0 ){
 126:	35 99       	sbic	0x06, 5	; 6
 128:	0a c0       	rjmp	.+20     	; 0x13e <__vector_4+0x4e>
			PORTD |= (1<<PORTD6); //FASSASSE A LUIZ
 12a:	eb e2       	ldi	r30, 0x2B	; 43
 12c:	f0 e0       	ldi	r31, 0x00	; 0
	
}
ISR(PCINT1_vect){ //ISR (Interrupt Service Routine) - Funcao da interrupcao
	if( (PINC & (1<<PINC5)) == 0){
		_delay_ms(100);
		while( (PINC & (1<<PINC5)) == 0 ){
 12e:	a6 e2       	ldi	r26, 0x26	; 38
 130:	b0 e0       	ldi	r27, 0x00	; 0
			PORTD |= (1<<PORTD6); //FASSASSE A LUIZ
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	
}
ISR(PCINT1_vect){ //ISR (Interrupt Service Routine) - Funcao da interrupcao
	if( (PINC & (1<<PINC5)) == 0){
		_delay_ms(100);
		while( (PINC & (1<<PINC5)) == 0 ){
 138:	8c 91       	ld	r24, X
 13a:	85 ff       	sbrs	r24, 5
 13c:	fa cf       	rjmp	.-12     	; 0x132 <__vector_4+0x42>
			PORTD |= (1<<PORTD6); //FASSASSE A LUIZ
		}
		if( (PINC & (1<<PINC5)) != 0 ){
 13e:	35 9b       	sbis	0x06, 5	; 6
 140:	05 c0       	rjmp	.+10     	; 0x14c <__vector_4+0x5c>
			PORTD &= ~(1<<PORTD6); //AI QUE ESCURIDAUM
 142:	eb e2       	ldi	r30, 0x2B	; 43
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8f 7b       	andi	r24, 0xBF	; 191
 14a:	80 83       	st	Z, r24
		}
	}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
