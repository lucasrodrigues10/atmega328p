
HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000034a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  000003f2  2**0
                  ALLOC
  3 .debug_aranges 00000050  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007f  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000032e  00000000  00000000  000004c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ad  00000000  00000000  000007ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000330  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011f  00000000  00000000  00000eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	UCSR0C = (1<<UCSR0B) | (1<<UCSZ00) | (1<<UCSZ01);

}

void USART_Transmit( unsigned char data )
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  9e:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
static volatile int i = 0;


void USART_Init(unsigned int ubrr){
	/* Set Baud Rate */
	UBRR0H = (unsigned int) (ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	/* Activate Transmissor (TX) e Receptor (RX) */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	80 83       	st	Z, r24
	/* Set frame format: 8 data; 1stop bit */
	UCSR0C = (1<<UCSR0B) | (1<<UCSZ00) | (1<<UCSZ01);
  b6:	20 81       	ld	r18, Z
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <USART_Init+0x1c>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	2a 95       	dec	r18
  c4:	e2 f7       	brpl	.-8      	; 0xbe <USART_Init+0x18>
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24

}
  cc:	08 95       	ret

000000ce <LED_Init>:
	UDR0 = data;
}

void LED_Init(){
	/* Set led OUTPUT */
	DDRD |= (1<<DDD6);
  ce:	ea e2       	ldi	r30, 0x2A	; 42
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	/* Turn on LED */
	PORTD |= (1<<PORTD6);
  d8:	eb e2       	ldi	r30, 0x2B	; 43
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
}
  e2:	08 95       	ret

000000e4 <usart_putchar>:


void usart_putchar( unsigned char data )
{
  e4:	98 2f       	mov	r25, r24
	// Do nothing while UDRE0 indicates data still in transit
	while( !(UCSR0A & (1<<UDRE0)) ) {}
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	85 ff       	sbrs	r24, 5
  ee:	fd cf       	rjmp	.-6      	; 0xea <usart_putchar+0x6>
	
	// Put data into buffer
	UDR0 = data;
  f0:	90 93 c6 00 	sts	0x00C6, r25
}
  f4:	08 95       	ret

000000f6 <usart_putstring>:


void usart_putstring(char s[])
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	fc 01       	movw	r30, r24
	int i = 0;
	
	while (s[i] != 0x00)
  fc:	80 81       	ld	r24, Z
  fe:	88 23       	and	r24, r24
 100:	39 f0       	breq	.+14     	; 0x110 <usart_putstring+0x1a>
 102:	ef 01       	movw	r28, r30
	{
		usart_putchar(s[i]);
 104:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putchar>

void usart_putstring(char s[])
{
	int i = 0;
	
	while (s[i] != 0x00)
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	21 96       	adiw	r28, 0x01	; 1
 10c:	88 23       	and	r24, r24
 10e:	d1 f7       	brne	.-12     	; 0x104 <usart_putstring+0xe>
	{
		usart_putchar(s[i]);
		i++;
	}
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <__vector_1>:

}

ISR(INT0_vect)//interrupt service routine when there is a change in logic level

{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31

	if (i==1)//when logic from HIGH to LOW
 128:	80 91 14 01 	lds	r24, 0x0114
 12c:	90 91 15 01 	lds	r25, 0x0115
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	81 f4       	brne	.+32     	; 0x154 <__vector_1+0x3e>

	{

		TCCR1B=0;//disabling counter
 134:	10 92 81 00 	sts	0x0081, r1

		pulse=TCNT1;//count memory is updated to integer
 138:	e4 e8       	ldi	r30, 0x84	; 132
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	90 93 17 01 	sts	0x0117, r25
 144:	80 93 16 01 	sts	0x0116, r24

		TCNT1=0;//resetting the counter memory
 148:	11 82       	std	Z+1, r1	; 0x01
 14a:	10 82       	st	Z, r1

		i=0;
 14c:	10 92 15 01 	sts	0x0115, r1
 150:	10 92 14 01 	sts	0x0114, r1

	}

	if (i==0)//when logic change from LOW to HIGH
 154:	80 91 14 01 	lds	r24, 0x0114
 158:	90 91 15 01 	lds	r25, 0x0115
 15c:	89 2b       	or	r24, r25
 15e:	59 f4       	brne	.+22     	; 0x176 <__vector_1+0x60>

	{

		TCCR1B|=(1<<CS10);//enabling counter
 160:	e1 e8       	ldi	r30, 0x81	; 129
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24

		i=1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 15 01 	sts	0x0115, r25
 172:	80 93 14 01 	sts	0x0114, r24

	}

}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:
	}
}

int main(void)

{
 188:	3f 92       	push	r3
 18a:	4f 92       	push	r4
 18c:	5f 92       	push	r5
 18e:	6f 92       	push	r6
 190:	7f 92       	push	r7
 192:	8f 92       	push	r8
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <main+0x24>
 1ac:	0f 92       	push	r0
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
	/* Turn off interrupt */
	cli();
 1b2:	f8 94       	cli
	
	/* Init USART */
	USART_Init(MYUBRR);
 1b4:	87 e6       	ldi	r24, 0x67	; 103
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	/* Init LED */
	LED_Init();
 1bc:	0e 94 67 00 	call	0xce	; 0xce <LED_Init>
	
	/* Trigger OUTPUT*/
	DDRD |= (1<<DDD7);
 1c0:	ea e2       	ldi	r30, 0x2A	; 42
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	80 83       	st	Z, r24
	/* Echo INPUT */
	DDRD &= ~(1<<DDD2);
 1ca:	80 81       	ld	r24, Z
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	80 83       	st	Z, r24
 1d0:	84 ef       	ldi	r24, 0xF4	; 244
 1d2:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d4:	20 e9       	ldi	r18, 0x90	; 144
 1d6:	31 e0       	ldi	r19, 0x01	; 1
 1d8:	f9 01       	movw	r30, r18
 1da:	31 97       	sbiw	r30, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x52>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <main+0x50>

	_delay_ms(50);

	EIMSK|=(1<<INT0);//enabling interrupt0
 1e2:	ed e3       	ldi	r30, 0x3D	; 61
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	80 83       	st	Z, r24

	EICRA |=(1<<ISC00);//setting interrupt triggering logic change
 1ec:	e9 e6       	ldi	r30, 0x69	; 105
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	80 83       	st	Z, r24

	int16_t COUNTA = 0;//storing digital output

	char SHOWA [3];
	
	sei();// enabling global interrupts
 1f6:	78 94       	sei

	while(1)

	{
		/* Trigger Enable */
		PORTD|=(1<<PIND7);
 1f8:	0f 2e       	mov	r0, r31
 1fa:	fb e2       	ldi	r31, 0x2B	; 43
 1fc:	cf 2e       	mov	r12, r31
 1fe:	dd 24       	eor	r13, r13
 200:	f0 2d       	mov	r31, r0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 202:	0f 2e       	mov	r0, r31
 204:	f0 e5       	ldi	r31, 0x50	; 80
 206:	3f 2e       	mov	r3, r31
 208:	f0 2d       	mov	r31, r0
		/* Trigger Disable */
		PORTD &=~(1<<PIND7);

		COUNTA = pulse/58;
		
		usart_putstring("DISTANCE = \n\r");
 20a:	0f 2e       	mov	r0, r31
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	8f 2e       	mov	r8, r31
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	9f 2e       	mov	r9, r31
 214:	f0 2d       	mov	r31, r0

		itoa(COUNTA,SHOWA,10); 
 216:	5e 01       	movw	r10, r28
 218:	08 94       	sec
 21a:	a1 1c       	adc	r10, r1
 21c:	b1 1c       	adc	r11, r1

		usart_putstring(SHOWA);
		usart_putstring("cm\n\r");
 21e:	0f 2e       	mov	r0, r31
 220:	fe e0       	ldi	r31, 0x0E	; 14
 222:	6f 2e       	mov	r6, r31
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	7f 2e       	mov	r7, r31
 228:	f0 2d       	mov	r31, r0
 22a:	0f 2e       	mov	r0, r31
 22c:	f0 e1       	ldi	r31, 0x10	; 16
 22e:	4f 2e       	mov	r4, r31
 230:	f7 e2       	ldi	r31, 0x27	; 39
 232:	5f 2e       	mov	r5, r31
 234:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 236:	0f 2e       	mov	r0, r31
 238:	f0 e9       	ldi	r31, 0x90	; 144
 23a:	ef 2e       	mov	r14, r31
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	ff 2e       	mov	r15, r31
 240:	f0 2d       	mov	r31, r0

	while(1)

	{
		/* Trigger Enable */
		PORTD|=(1<<PIND7);
 242:	f6 01       	movw	r30, r12
 244:	80 81       	ld	r24, Z
 246:	80 68       	ori	r24, 0x80	; 128
 248:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 24a:	83 2d       	mov	r24, r3
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0xc4>

		_delay_us(15);

		/* Trigger Disable */
		PORTD &=~(1<<PIND7);
 250:	80 81       	ld	r24, Z
 252:	8f 77       	andi	r24, 0x7F	; 127
 254:	80 83       	st	Z, r24

		COUNTA = pulse/58;
 256:	00 91 16 01 	lds	r16, 0x0116
 25a:	10 91 17 01 	lds	r17, 0x0117
		
		usart_putstring("DISTANCE = \n\r");
 25e:	c4 01       	movw	r24, r8
 260:	0e 94 7b 00 	call	0xf6	; 0xf6 <usart_putstring>

		itoa(COUNTA,SHOWA,10); 
 264:	c8 01       	movw	r24, r16
 266:	6a e3       	ldi	r22, 0x3A	; 58
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	0e 94 4b 01 	call	0x296	; 0x296 <__divmodhi4>
 26e:	cb 01       	movw	r24, r22
 270:	b5 01       	movw	r22, r10
 272:	4a e0       	ldi	r20, 0x0A	; 10
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	0e 94 72 01 	call	0x2e4	; 0x2e4 <itoa>

		usart_putstring(SHOWA);
 27a:	c5 01       	movw	r24, r10
 27c:	0e 94 7b 00 	call	0xf6	; 0xf6 <usart_putstring>
		usart_putstring("cm\n\r");
 280:	c3 01       	movw	r24, r6
 282:	0e 94 7b 00 	call	0xf6	; 0xf6 <usart_putstring>
 286:	92 01       	movw	r18, r4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 288:	c7 01       	movw	r24, r14
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 292:	d1 f7       	brne	.-12     	; 0x288 <main+0x100>
 294:	d6 cf       	rjmp	.-84     	; 0x242 <main+0xba>

00000296 <__divmodhi4>:
 296:	97 fb       	bst	r25, 7
 298:	09 2e       	mov	r0, r25
 29a:	07 26       	eor	r0, r23
 29c:	0a d0       	rcall	.+20     	; 0x2b2 <__divmodhi4_neg1>
 29e:	77 fd       	sbrc	r23, 7
 2a0:	04 d0       	rcall	.+8      	; 0x2aa <__divmodhi4_neg2>
 2a2:	0c d0       	rcall	.+24     	; 0x2bc <__udivmodhi4>
 2a4:	06 d0       	rcall	.+12     	; 0x2b2 <__divmodhi4_neg1>
 2a6:	00 20       	and	r0, r0
 2a8:	1a f4       	brpl	.+6      	; 0x2b0 <__divmodhi4_exit>

000002aa <__divmodhi4_neg2>:
 2aa:	70 95       	com	r23
 2ac:	61 95       	neg	r22
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255

000002b0 <__divmodhi4_exit>:
 2b0:	08 95       	ret

000002b2 <__divmodhi4_neg1>:
 2b2:	f6 f7       	brtc	.-4      	; 0x2b0 <__divmodhi4_exit>
 2b4:	90 95       	com	r25
 2b6:	81 95       	neg	r24
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	08 95       	ret

000002bc <__udivmodhi4>:
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	51 e1       	ldi	r21, 0x11	; 17
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <__udivmodhi4_ep>

000002c4 <__udivmodhi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	a6 17       	cp	r26, r22
 2ca:	b7 07       	cpc	r27, r23
 2cc:	10 f0       	brcs	.+4      	; 0x2d2 <__udivmodhi4_ep>
 2ce:	a6 1b       	sub	r26, r22
 2d0:	b7 0b       	sbc	r27, r23

000002d2 <__udivmodhi4_ep>:
 2d2:	88 1f       	adc	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	5a 95       	dec	r21
 2d8:	a9 f7       	brne	.-22     	; 0x2c4 <__udivmodhi4_loop>
 2da:	80 95       	com	r24
 2dc:	90 95       	com	r25
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	08 95       	ret

000002e4 <itoa>:
 2e4:	fb 01       	movw	r30, r22
 2e6:	9f 01       	movw	r18, r30
 2e8:	e8 94       	clt
 2ea:	42 30       	cpi	r20, 0x02	; 2
 2ec:	c4 f0       	brlt	.+48     	; 0x31e <itoa+0x3a>
 2ee:	45 32       	cpi	r20, 0x25	; 37
 2f0:	b4 f4       	brge	.+44     	; 0x31e <itoa+0x3a>
 2f2:	4a 30       	cpi	r20, 0x0A	; 10
 2f4:	29 f4       	brne	.+10     	; 0x300 <itoa+0x1c>
 2f6:	97 fb       	bst	r25, 7
 2f8:	1e f4       	brtc	.+6      	; 0x300 <itoa+0x1c>
 2fa:	90 95       	com	r25
 2fc:	81 95       	neg	r24
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	64 2f       	mov	r22, r20
 302:	77 27       	eor	r23, r23
 304:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__udivmodhi4>
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	8a 33       	cpi	r24, 0x3A	; 58
 30c:	0c f0       	brlt	.+2      	; 0x310 <itoa+0x2c>
 30e:	89 5d       	subi	r24, 0xD9	; 217
 310:	81 93       	st	Z+, r24
 312:	cb 01       	movw	r24, r22
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	a1 f7       	brne	.-24     	; 0x300 <itoa+0x1c>
 318:	16 f4       	brtc	.+4      	; 0x31e <itoa+0x3a>
 31a:	5d e2       	ldi	r21, 0x2D	; 45
 31c:	51 93       	st	Z+, r21
 31e:	10 82       	st	Z, r1
 320:	c9 01       	movw	r24, r18
 322:	0c 94 93 01 	jmp	0x326	; 0x326 <strrev>

00000326 <strrev>:
 326:	dc 01       	movw	r26, r24
 328:	fc 01       	movw	r30, r24
 32a:	67 2f       	mov	r22, r23
 32c:	71 91       	ld	r23, Z+
 32e:	77 23       	and	r23, r23
 330:	e1 f7       	brne	.-8      	; 0x32a <strrev+0x4>
 332:	32 97       	sbiw	r30, 0x02	; 2
 334:	04 c0       	rjmp	.+8      	; 0x33e <strrev+0x18>
 336:	7c 91       	ld	r23, X
 338:	6d 93       	st	X+, r22
 33a:	70 83       	st	Z, r23
 33c:	62 91       	ld	r22, -Z
 33e:	ae 17       	cp	r26, r30
 340:	bf 07       	cpc	r27, r31
 342:	c8 f3       	brcs	.-14     	; 0x336 <strrev+0x10>
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
